name: KinD OHDO e2e Tests

on:
  pull_request:
    branches:
      - main
      - 'incubation'
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - 'LICENSE'
  push:
    branches:
      - main
      - 'incubation'
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - 'LICENSE'
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  QUAY_ORG: ${{ secrets.QUAY_ORG}}
  IMAGE_REGISTRY: quay.io
  BUNDLE_IMAGE_NAME: opendatahub-operator-bundle
  IMAGE_NAME: opendatahub-operator
  IMAGE_TAG: pr-678 #pr-${{ github.event.pull_request.number }}
  OPERATOR_NAMESPACE: opendatahub-operator-system
  OLM_VERSION: v0.24.0
  CATALOG_BASE_IMG: "registry.access.redhat.com/redhat/community-operator-index:v4.13"
  RESOURCES_DIR: ${{ github.workspace }}/.github/resources

jobs:
  odho-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Login to Quay.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY}}
          username: ${{ secrets.QUAY_ID }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Setup and start KinD cluster
        uses: ./.github/actions/kind

      - name: Verify KinD
        run:  |
          kind get clusters
          kubectl get nodes -o wide

      - name: Build and push Operator Bundle Image
        run: |
          # Pull the image from registry

          while true
          do
            echo "Pulling image from Quay.io";
            sleep 10

            if docker pull quay.io/${{ env.QUAY_ORG }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            then
              break
            fi

          done

          # Build operator bundle image
          make deploy-bundle -e BUNDLE_IMG=quay.io/${{ env.QUAY_ORG }}/${{ env.BUNDLE_IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          -e IMG=quay.io/${{ env.QUAY_ORG }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} IMAGE_BUILDER=docker

      - name: Load Image in KinD cluster
        run: |
          kind export kubeconfig --name kind-cluster
          kind load docker-image quay.io/${{ env.QUAY_ORG }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --name kind-cluster
          docker exec -t kind-cluster-control-plane crictl images

      - name: Install OLM
        run: |
          kubectl create -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/${OLM_VERSION}/crds.yaml
          # wait for a while to be sure CRDs are installed
          sleep 1
          kubectl create -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/${OLM_VERSION}/olm.yaml
          echo Wait for default CatalogSource to start
          kubectl wait -n ${{ env.CATALOG_SOURCE_NAMESPACE }} catalogsource/${{ env.CATALOG_SOURCE_NAME }} --for=jsonpath='{.status.connectionState.lastObservedState}'=READY --timeout=180s
        env:
          CATALOG_SOURCE_NAME: "operatorhubio-catalog"
          CATALOG_SOURCE_NAMESPACE: "olm"

      - name: Create openshift-operator namespace and OperatorGroup
        run: |
          kubectl create namespace openshift-operators
          kubectl create -f ${{ env.RESOURCES_DIR }}/olm/operatorgroup.yaml

      - name: Apply CRDs
        run: |
          kubectl apply -f ${{ env.RESOURCES_DIR }}/crds

      - name: Deploy OpenDataHub operator from OLM
        id: deploy
        run: |
          echo Deploying operator using Subscription
          envsubst < ${{ env.RESOURCES_DIR }}/olm/catalogsource.yaml > ${{ env.TEMP_DIR }}/catalogsource.yaml
          envsubst < ${{ env.RESOURCES_DIR }}/olm/subscription.yaml > ${{ env.TEMP_DIR }}/subscription.yaml

          kubectl create -f ${{ env.TEMP_DIR }}/catalogsource.yaml

          echo Wait for CatalogSource ${{ env.CATALOG_SOURCE_NAME }} to start
          kubectl wait -n ${{ env.CATALOG_SOURCE_NAMESPACE }} catalogsource/${{ env.CATALOG_SOURCE_NAME }} --for=jsonpath='{.status.connectionState.lastObservedState}'=READY --timeout=300s

          kubectl create -f ${{ env.TEMP_DIR }}/subscription.yaml

          echo Waiting for Subscription to be ready
          kubectl wait -n ${{ env.SUBSCRIPTION_NAMESPACE }} subscription/${{ env.SUBSCRIPTION_NAME }} --for=jsonpath='{.status.state}'=AtLatestKnown --timeout=180s

          echo Waiting for Deployment to be ready
          timeout 300 bash -c 'until [[ $(kubectl get deployment/opendatahub-operator-controller-manager -n '${{ env.SUBSCRIPTION_NAMESPACE }}') ]]; do sleep 5 && echo "$(kubectl get deployment/opendatahub-operator-controller-manager -n '${{ env.SUBSCRIPTION_NAMESPACE }}')"; done'
          kubectl wait -n ${{ env.SUBSCRIPTION_NAMESPACE }} deployment/opendatahub-operator-controller-manager --for=condition=Available=true --timeout=300s
        env:
          CATALOG_SOURCE_NAME: "odh-olm-test"
          CATALOG_SOURCE_NAMESPACE: "olm"
          SUBSCRIPTION_NAME: "opendatahub-operator"
          SUBSCRIPTION_NAMESPACE: "openshift-operators"

      - name: Print ODH Operator Pod Logs
        run: kubectl get pods -n openshift-operators -o jsonpath='{.items[*].metadata.name}' | xargs -I {} kubectl logs -n openshift-operators {}

      # - name: Wait for DSPO deployment to be ready
      #   run: |
      #     kubectl get deployments -n ${{ env.ODHO }}
      #     timeout 300 bash -c 'until [[ $(kubectl get deployment/opendatahub-operator-controller-manager -n '${{ env.ODHO }}') ]]; do sleep 5 && echo "$(kubectl get deployment/opendatahub-operator-controller-manager -n '${{ env.ODHO }}')"; done'
      #   env:
      #     ODHO: opendatahub-operator-controller-manager

      - name: Run e2e tests
        run: |
          make e2e-test OPERATOR_NAMESPACE="openshift-operators"

      - name: Clean up KinD cluster
        run:  |
          kind delete cluster --name kind-cluster
